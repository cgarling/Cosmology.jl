var documenterSearchIndex = {"docs":
[{"location":"guide/#guide","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"","category":"section"},{"location":"guide/#Constructing-Cosmology-Instances","page":"Using Cosmology.jl","title":"Constructing Cosmology Instances","text":"","category":"section"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"To create an instance of a cosmology that you can use to do computations, you can use the convenience constructor cosmology. By default this constructor will use cosmological parameters from the Planck 2018 results; no arguments are necessary unless you want to override the defaults.","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"using Cosmology\nc = cosmology()","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"Alternatively, you can use one of the pre-constructed instances, like Planck18 or WMAP9. These are not exported and so must be imported as","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"import Cosmology: Planck18\nPlanck18","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"import Cosmology: WMAP9\nWMAP9","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"tip: Tip\ncosmology is type-unstable because it returns different concrete subtypes of AbstractCosmology depending on the parameters you give it. This results in a significant performance hit; for example, c=cosmology() takes ~300 ns, while FlatLCDM(c.h,c.Ω_Λ,c.Ω_m,c.Ω_b,c.Tcmb0,c.Neff,c.m_nu) takes ~1 ns. If you want to create many cosmology instances very quickly, it is recommended that you use the base constructors. However, these basic constructors do not include much in the way of argument checking; for example, see the section below on neutrino handling.","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"import BenchmarkTools: @benchmark\nimport Cosmology: FlatLCDM\n@benchmark cosmology(h=0.6766,OmegaK=0.0,OmegaM=0.30966,OmegaB=0.04897,OmegaG=nothing,Tcmb0=2.7255,w0=-1,wa=0,N_eff=3.046,m_ν=(0.0,0.0,0.06))","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"@benchmark FlatLCDM($0.6766, $0.6888463055445425, $0.30966, $0.04897, $2.7255, $3.046, $(0.0,0.0,0.06))","category":"page"},{"location":"guide/#Calling-Methods","page":"Using Cosmology.jl","title":"Calling Methods","text":"","category":"section"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"With a cosmological type constructed, we can use it to call methods. For example, to calculate the critical density at a redshift of 1,","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"ρ_c(c,1.0)","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"We can transform this to different units as well,","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"import Unitful as u\nimport UnitfulAstro as ua\nρ_c(ua.Msun/ua.kpc^3,c,1.0)","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"Methods with return values that have attached units should also have this conversion interface. See the section on methods for a full list of defined methods.","category":"page"},{"location":"guide/#Neutrinos","page":"Using Cosmology.jl","title":"Neutrinos","text":"","category":"section"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"This package supports massive neutrinos by assuming that the total mass in neutrinos is split between the species. For greatest efficiency you should pass m_ν to cosmology or one of the basic constructors as an NTuple{N,T}; that is, a tuple where all the elements are of the same concrete type. Internally they are stored in eV but with the units stripped, so a good argument would be m_ν=(0.0,0.0,0.06) for 3 neutrino species with one massive species with mass 0.06 eV. You can provide neutrino masses to cosmology and the basic constructors with energy or mass units as well;","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"cosmology(m_ν=(0.0,0.0,0.06) .* u.eV)","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"FlatLCDM(0.6766, 0.6888463055445425, 0.30966, 0.04897, 2.7255, 3.046, (0.0,0.0,0.06) .* u.eV)","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"There is currently some weirdness with how massless neutrinos are dealt with; for now, I recommend that you make the length of the m_ν iterable you provide equal to the result of Cosmology.n_nu(N_eff) for the effective number of neutrino species you choose. For example, if N_eff=3.046 then Cosmology.n_nu(N_eff)=3 and your m_ν iterable should have length 3. This is done for you in the pre-constructed instances. A warning will be issued by cosmology if length(m_ν) != Cosmology.n_nu(N_eff) and !iszero(N_eff), but none of the basic constructors contain such checks. The implementation of massive neutrinos is open to change.","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"tip: Tip\nInclusion of massive neutrinos is expensive. For example, for the default massive neutrino parameters c=cosmology(), the evaluation of E(c, 0.8) takes 114.613 ns, while E( cosmology(m_ν=(0.0,),N_eff=3.046), 0.8) takes 6.986 ns and E( cosmology(m_ν=(0.0,),N_eff=0), 0.8) takes 6.095 ns. This makes a significant difference in methods that involve integrations (e.g., comoving_radial_dist). If speed is a concern, consider if you can neglect neutrinos for your calculation.","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"c_massivenu = cosmology()\nc_masslessnu = cosmology(m_ν=(0.0,),N_eff=3.046)\nc_nonu = cosmology(m_ν=(0.0,),N_eff=0.0)\nnothing # hide","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"@benchmark E($c_massivenu,$0.8)","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"@benchmark E($c_masslessnu,$0.8)","category":"page"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"@benchmark E($c_nonu,$0.8)","category":"page"},{"location":"guide/#Integrated-Packages","page":"Using Cosmology.jl","title":"Integrated Packages","text":"","category":"section"},{"location":"guide/","page":"Using Cosmology.jl","title":"Using Cosmology.jl","text":"Cosmology.jl is envisioned as the base for a collection of packages for things like cosmological power spectra, growth factors, halo mass functions, etc. As they become available, some examples will be shown here and on the integrated packages page.","category":"page"},{"location":"public_methods/#methods","page":"Public Methods","title":"Public Methods","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"The following methods are part of our publicly exported API.","category":"page"},{"location":"public_methods/#Temperatures","page":"Public Methods","title":"Temperatures","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"T_cmb\nT_nu","category":"page"},{"location":"public_methods/#Cosmology.T_cmb","page":"Public Methods","title":"Cosmology.T_cmb","text":"T_cmb([u::Unitful.Unitlike,] c::AbstractCosmology)\nT_cmb([u::Unitful.Unitlike,] c::AbstractCosmology, z)\nT_cmb([u::Unitful.Unitlike,] z, Tcmb0)\n\nReturn the temperature of the CMB at redshift z, in Kelvin. Will convert to compatible unit u if provided.\n\ntextT_textCMB(z) = textT_textCMB0 times left( 1+z right)\n\nExamples\n\njulia> T_cmb(Cosmology.Planck18)\n2.7255 K\n\njulia> T_cmb(Cosmology.Planck18, 1.0)\n5.451 K\n\njulia> T_cmb(Unitful.°C, Cosmology.Planck18, 1.0)\n-267.69899999999996 °C\n\njulia> T_cmb(1.0, 2.7255)\n5.451 K\n\njulia> T_cmb(1.0, 2.7255 * Unitful.K)\n5.451 K\n\njulia> T_cmb(Unitful.°C, 1.0, 2.7255 * Unitful.K)\n-267.69899999999996 °C\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.T_nu","page":"Public Methods","title":"Cosmology.T_nu","text":"T_nu([u::Unitful.Unitlike,] c::AbstractCosmology [,z::Number])\nT_nu(Tcmb0::Number [,z::Number])\nT_nu(Tcmb0::u.Temperature [,z::Number])\n\nReturn the neutrino temperature of the cosmology at redshift z in Kelvin. If z is not provided, will return neutrino temperature at z=0. Will convert to compatible unit u if provided.\n\nbeginaligned\ntextT_nu0 = frac411^left(13right) times textT_textCMB0 newline\ntextT_nu(z) = textT_nu0 times left( 1+z right) \nendaligned\n\nSee, e.g., Equation 3.1.20 on page 154 of Weinberg's \"Cosmology\" for an explanation of the prefactor.\n\nExamples\n\njulia> T_nu(2.7255)\n1.9453688391750839 K\n\njulia> T_nu(Cosmology.Planck18)\n1.9453688391750839 K\n\njulia> T_nu(2.7255, 1)\n3.8907376783501677 K\n\njulia> T_nu(2.7255 * Unitful.K, 1)\n3.8907376783501677 K\n\njulia> T_nu(Cosmology.Planck18)\n1.9453688391750839 K\n\njulia> T_nu(Cosmology.Planck18, 1)\n3.8907376783501677 K\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Hubble-Factors","page":"Public Methods","title":"Hubble Factors","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"E\nH\nhubble_time\nhubble_dist","category":"page"},{"location":"public_methods/#Cosmology.E","page":"Public Methods","title":"Cosmology.E","text":"E(c::AbstractCosmology, z::Real)\nE(z,h,OmegaM,OmegaK,OmegaL,OmegaG,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nReturn the Hubble parameter as a function of redshift, in units of H₀.\n\nE(z) equiv fracH(z)H_0 = fracH(z)h  frac1100  textkm  texts^-1  textMpc^-1\n\nSee also a2E, H.\n\nExamples\n\njulia> E(Cosmology.Planck18,1.0)\n1.7828937335017068\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.H","page":"Public Methods","title":"Cosmology.H","text":"H(c::AbstractCosmology, z::Real)\n\nReturn the Hubble parameter as a function of redshift, in km / s / Mpc. From the Friedmann equation,\n\nH^2 = left( fracdotaa right) = frac8 pi G rho3 - frackc^2a^2\n\nwhere a is the cosmological scale factor, dota is the time derivative of a, G is Newton's gravitational constant, c is the speed of light, rho is a mass density, and k is the curvature parameter. k is typically -1, 0, or 1; k=-1 corresponds to an open Universe (forever expanding), k=0 corresponds to a \"flat\" Universe with ρ==ρ_c, and k=1 corresponds to a closed Universe (eventual contraction). See also Ω_k.\n\nExamples\n\njulia> H(Cosmology.Planck18,1.0)\n120.63059000872548 km Mpc^-1 s^-1\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.hubble_time","page":"Public Methods","title":"Cosmology.hubble_time","text":"hubble_time(c::AbstractCosmology, z::Real)\n\nReturn frac1textHleft(zright) in Gyr.\n\nExamples\n\njulia> hubble_time(Cosmology.Planck18, 1.0)\n8.105673872689037 Gyr\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.hubble_dist","page":"Public Methods","title":"Cosmology.hubble_dist","text":"hubble_dist(c::AbstractCosmology, z::Real)\n\nReturn the speed of light times the Hubble time at redshift z in Mpc.\n\n    D(z) = fraccH(z)\n\nExamples\n\njulia> hubble_dist(Cosmology.Planck18,1.0)\n2485.21090693758 Mpc\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Lengths-and-Volumes","page":"Public Methods","title":"Lengths and Volumes","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"comoving_radial_dist\ncomoving_transverse_dist\nangular_diameter_dist\nluminosity_dist\ndistmod\ncomoving_volume\ncomoving_volume_element\nsound_horizon","category":"page"},{"location":"public_methods/#Cosmology.comoving_radial_dist","page":"Public Methods","title":"Cosmology.comoving_radial_dist","text":"comoving_radial_dist([u::Unitlike,] c::AbstractCosmology, [z₁,] z₂; kws...)\n\nCalculate the comoving radial distance (sometimes also called comoving line-of-sight distance) in Mpc at redshift z₂ as seen by an observer at z₁.  Redshift z₁ defaults to 0 if omitted.  Will convert to compatible unit u if provided. kws are integration options passed to QuadGK.quadgk.\n\nbeginaligned\nD_R(z_1z_2) = fraccH_0 int_z_1^z_2 frac1E(z)  dz = fraccH_0 int_a(z_2)^a(z_1) frac1E(a^prime)  a^prime  2  da^prime\nendaligned\n\nExamples\n\njulia> comoving_radial_dist(Cosmology.Planck18, 1.0)\n3395.6344711515626 Mpc\n\njulia> comoving_radial_dist(Cosmology.Planck18, 1.0, 2.0)\n1912.5544127348157 Mpc\n\njulia> comoving_radial_dist(UnitfulAstro.Gpc, Cosmology.Planck18, 1.0, 2.0)\n1.9125544127348157 Gpc\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.comoving_transverse_dist","page":"Public Methods","title":"Cosmology.comoving_transverse_dist","text":"comoving_transverse_dist(c::AbstractCosmology, z₁, z₂ = nothing; kws...)\n\nReturns the comoving transverse distance between two points with an angular separation of 1 radian at redshift z₂ as measured by an observer at redshift z₁. This is the same as the comoving distance if Ω_k is zero (as in the current concordance ΛCDM model). Will convert to compatible unit u if provided. kws are integration options passed to quadgk.\n\nD_T(z_1z_2) = \nbegincases\nfraccH_0  sqrtOmega_k0  textsinh left( fracH_0  sqrtOmega_k0c  D_R(z_1z_2) right)  forall  Omega_k  0 newline\nD_R(z_1z_2)  forall  Omega_k = 0 newline\nfraccH_0  sqrt-Omega_k0  textsin left( fracH_0  sqrt-Omega_k0c  D_R(z_1z_2) right)  forall  Omega_k  0 newline\nendcases\n\nwhere D_R(z_1z_2) is the comoving radial distance.\n\nExamples\n\njulia> comoving_transverse_dist(Cosmology.Planck18, 1.0) == comoving_radial_dist(Cosmology.Planck18, 1.0)\ntrue\n\njulia> comoving_transverse_dist(cosmology(OmegaK=0.1), 1.0)\n3331.2531218753124 Mpc\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.angular_diameter_dist","page":"Public Methods","title":"Cosmology.angular_diameter_dist","text":"angular_diameter_dist([u::Unitlike,] c::AbstractCosmology, [z₁,] z₂; kws...)\n\nRatio of the proper transverse size in Mpc of an object at redshift z₂ to its angular size in radians, as seen by an observer at z₁.  Redshift z₁ defaults to 0 if omitted.  Will convert to compatible unit u if provided. kws are integration options passed to quadgk.\n\nbeginaligned\nD_A(z_1z_2) = fracD_T(z_1 z_2)1+z_2 = D_T(z_1 z_2)  a(z_2) newline\nD_A(z) = fracD_T(z)1+z = D_T(z)  a(z)\nendaligned\n\nwhere D_T is the comoving transverse distance and a is the scale factor. \n\nExamples\n\njulia> angular_diameter_dist(Cosmology.Planck18, 1.0)\n1697.8172355757813 Mpc\n\njulia> angular_diameter_dist(Cosmology.Planck18, 1.0, 2.0)\n637.5181375782719 Mpc\n\njulia> angular_diameter_dist(UnitfulAstro.Gpc, Cosmology.Planck18, 1.0, 2.0)\n0.6375181375782719 Gpc\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.luminosity_dist","page":"Public Methods","title":"Cosmology.luminosity_dist","text":"luminosity_dist([u::Unitlike,] c::AbstractCosmology, z; kws...)\n\nBolometric luminosity distance in Mpc at redshift z. Will convert to compatible unit u if provided. kws... are integration options passed to QuadGK.quadgk.\n\nD_L(z) = D_T(z) times left(1 + zright) = fracD_T(z)aleft(zright)\n\nwhere D_T is the comoving transverse distance and a is the scale factor. \n\nExamples\n\njulia> luminosity_dist(Cosmology.Planck18, 1.0)\n6791.268942303125 Mpc\n\njulia> luminosity_dist(UnitfulAstro.Gpc, Cosmology.Planck18, 1.0)\n6.791268942303125 Gpc\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.distmod","page":"Public Methods","title":"Cosmology.distmod","text":"distmod(c::AbstractCosmology, z; kws...)\n\nDistance modulus in magnitudes at redshift z. kws... are integration options passed to QuadGK.quadgk.\n\nmu(z) = 5 times textlog_10 left( D_L(z) right) + 25\n\nwhere D_L(z) is the luminosity distance in units of Mpc.\n\nExamples\n\njulia> distmod(Cosmology.Planck18,1.0)\n44.159754646918806\n\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.comoving_volume","page":"Public Methods","title":"Cosmology.comoving_volume","text":"comoving_volume([u::Unitlike,] c::AbstractCosmology, z; kws...)\n\nComoving volume in Gpc^3 at redshift z. Will convert to compatible unit u if provided. kws... are integration options passed to QuadGK.quadgk.\n\nExamples\n\njulia> comoving_volume(Cosmology.Planck18, 1.0)\n164.00285577357855 Gpc^3\n\njulia> comoving_volume(UnitfulAstro.Mpc^3, Cosmology.Planck18, 1.0)\n1.6400285577357855e11 Mpc^3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.comoving_volume_element","page":"Public Methods","title":"Cosmology.comoving_volume_element","text":"comoving_volume_element([u::Unitlike,] c::AbstractCosmology, z; kws...)\n\nComoving volume element in Gpc out to redshift z. Will convert to compatible unit u if provided. kws... are integration options passed to QuadGK.quadgk.\n\nExamples\n\njulia> comoving_volume_element(Cosmology.Planck18, 1.0)\n28.655310479576467 Gpc^3\n\njulia> comoving_volume_element(UnitfulAstro.Mpc^3, Cosmology.Planck18, 1.0)\n2.8655310479576466e10 Mpc^3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.sound_horizon","page":"Public Methods","title":"Cosmology.sound_horizon","text":"sound_horizon(c::AbstractCosmology)\n\nReturn the sound horizon length (in Mpc), given by Equation 26 in Eisenstein & Hu 1998.\n\ns = frac445  textlog left( 983  Omega_0  h^2 right) sqrt 1 + 10  left( Omega_b  h^2 right)^34    textMpc\n\nExamples\n\njulia> sound_horizon(Cosmology.Planck18)\n150.10339082768203 Mpc\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Times","page":"Public Methods","title":"Times","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"age\nlookback_time\nmatter_radiation_equality","category":"page"},{"location":"public_methods/#Cosmology.age","page":"Public Methods","title":"Cosmology.age","text":"age([u::Unitlike,] c::AbstractCosmology, z; kws...)\n\nReturn the age of the universe in Gyr at redshift z. Will convert to compatible unit u if provided. kws... are integration options passed to QuadGK.quadgk.\n\nExamples\n\njulia> age(Cosmology.Planck18, 0.0)\n13.786885301987898 Gyr\n\njulia> age(UnitfulAstro.Myr, Cosmology.Planck18, 0.0)\n13786.885301987897 Myr\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.lookback_time","page":"Public Methods","title":"Cosmology.lookback_time","text":"lookback_time([u::Unitlike,] c::AbstractCosmology, z; kws...)\n\nDifference between age at redshift 0 and age at redshift z in Gyr. Will convert to compatible unit u if provided. kws... are integration options passed to QuadGK.quadgk.\n\nExamples\n\njulia> lookback_time(Cosmology.Planck18, 1.0)\n7.935542002084356 Gyr\n\njulia> lookback_time(UnitfulAstro.Myr, Cosmology.Planck18, 1.0)\n7935.542002084356 Myr\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.matter_radiation_equality","page":"Public Methods","title":"Cosmology.matter_radiation_equality","text":"matter_radiation_equality(c::AbstractCosmology)\n\nReturn the redshift of matter-radiation equality. This is computed as Equation 2 in Eisenstein and Hu 1998. I previously had a different formula but couldn't figure out where it came from.\n\nExamples\n\njulia> matter_radiation_equality(Cosmology.Planck18) ≈ 3413.1817608491015\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Densities","page":"Public Methods","title":"Densities","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"ρ_c\nρ_m\nρ_b\nρ_dm\nρ_Λ\nρ_γ\nρ_ν\nρ_r\nlagrangianR\nlagrangianM\nΩ_m\nΩ_b\nΩ_dm\nΩ_k\nΩ_γ\nΩ_ν\nΩ_r\nΩ_Λ\nδc","category":"page"},{"location":"public_methods/#Cosmology.ρ_c","page":"Public Methods","title":"Cosmology.ρ_c","text":"ρ_c([u::UnitLike,] c::AbstractCosmology, z)\nρ_c([u::UnitLike,] z, h, OmegaM, OmegaK, OmegaL, Tcmb0, m_nu, Neff, w0=-1, wa=0)\nρ_c(h::Number,E::Number)\n\nThe critical density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nbeginaligned\nrho_0c equiv frac3 H_0^28 pi G = 1878 times 10^-29  h^2  textgcm^3 newline\nrho_c(z) equiv frac3 H(z)^28 pi G = 1878 times 10^-29  left(E(z) times hright)^2  textgcm^3\nendaligned\n\nwhere E is the Hubble factor in units of H_0. See, e.g., Equation 1.5.28 on page 57 of Weinberg's \"Cosmology\" for more information.\n\nExamples\n\njulia> ρ_c(Cosmology.Planck18, 0.0)\n8.598814256619093e-30 g cm^-3\n\njulia> ρ_c(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0)\n127.05281539744222 M⊙ kpc^-3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_m","page":"Public Methods","title":"Cosmology.ρ_m","text":"ρ_m([u::UnitLike,] c::AbstractCosmology, z)\nρ_m([u::UnitLike,] z, h, OmegaM)\n\nThe matter density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nrho_m(z) = 1878 times 10^-29  h^2  Omega_m0  (1+z)^3  textgcm^3 \n\nExamples\n\njulia> ρ_m(Cosmology.Planck18, 0.0)\n2.6627088227046682e-30 g cm^-3\n\njulia> ρ_m(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0)\n39.343174815971956 M⊙ kpc^-3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_b","page":"Public Methods","title":"Cosmology.ρ_b","text":"ρ_b([u::UnitLike,] c::AbstractCosmology, z)\nρ_b([u::UnitLike,] z, h, OmegaB)\n\nThe baryon density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nrho_b(z) = 1878 times 10^-29  h^2  Omega_b0  (1+z)^3  textgcm^3 \n\nExamples\n\njulia> ρ_b(Cosmology.Planck18, 0.0)\n4.21083934146637e-31 g cm^-3\n\njulia> ρ_b(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0)\n6.221776370012746 M⊙ kpc^-3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_dm","page":"Public Methods","title":"Cosmology.ρ_dm","text":"ρ_dm([u::UnitLike,] c::AbstractCosmology, z)\nρ_dm([u::UnitLike,] z, h, OmegaDM)\n\nThe dark matter density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nrho_dm(z) = 1878 times 10^-29  h^2  Omega_dm0  (1+z)^3  textgcm^3 \n\nExamples\n\njulia> ρ_dm(Cosmology.Planck18, 0.0)\n2.2416248885580312e-30 g cm^-3\n\njulia> ρ_dm(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0)\n33.12139844595921 M⊙ kpc^-3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_Λ","page":"Public Methods","title":"Cosmology.ρ_Λ","text":"ρ_Λ([u::UnitLike,] c::AbstractCosmology, z)\nρ_Λ([u::UnitLike,] z, h, Ω_Λ, w0=-1, wa=0)\n\nThe dark energy density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided. For a general dark energy equation of state w(z),\n\nrho_Lambda(z) = rho_Lambda0  exp left  3 int_0^z  frac1+w left( z^primeright)1+z^prime  dz^prime  right\n\nFor constant w, this reduces to\n\nrho_Lambda(z) = 1878 times 10^-29  h^2  Omega_Lambda0  left(1+zright)^3left(1+wright)  textgcm^3 \n\nand for a cosmological constant w=-1,\n\nrho_Lambda(z) = 1878 times 10^-29  h^2  Omega_Lambda0  textgcm^3 \n\nSee also de_density_scale.\n\nExamples\n\njulia> ρ_Λ(Cosmology.Planck18, 0.0)\n5.923261432735804e-30 g cm^-3\n\njulia> ρ_Λ(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0)\n87.51986249556084 M⊙ kpc^-3\n\njulia> ρ_Λ(Cosmology.Planck18, 0.0) == ρ_Λ(Cosmology.Planck18, 1.0)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_γ","page":"Public Methods","title":"Cosmology.ρ_γ","text":"ρ_γ([u::UnitLike,] c::AbstractCosmology, z)\nρ_γ([u::UnitLike,] z, h, Ω_γ)\n\nThe photon matter density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nrho_gamma(z) = 1878 times 10^-29  h^2  Omega_gamma0  (1+z)^4  textgcm^3 \n\nExamples\n\njulia> ρ_γ(Cosmology.Planck18, 0.0) ≈ 4.645092477570597e-34 * Unitful.g / Unitful.cm^3\ntrue\n\njulia> ρ_γ(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0) ≈ 0.006863412319931541 * UnitfulAstro.Msun / UnitfulAstro.kpc^3\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_ν","page":"Public Methods","title":"Cosmology.ρ_ν","text":"ρ_ν([u::UnitLike,] c::AbstractCosmology, z)\nρ_ν([u::UnitLike,] z, h, Tcmb0, Neff, m_nu, N_nu=Cosmology.n_nu(Neff))\n\nThe neutrino energy density of the universe at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nrho_nu(z) = 1878 times 10^-29  h^2  Omega_nu0  (1+z)^4  textgcm^3 \n\nExamples\n\njulia> ρ_ν(Cosmology.Planck18, 0.0)\n1.2379491930863195e-32 g cm^-3\n\njulia> ρ_ν(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0)\n0.1829146735894845 M⊙ kpc^-3\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.ρ_r","page":"Public Methods","title":"Cosmology.ρ_r","text":"ρ_r([u::UnitLike,] c::AbstractCosmology, z)\nρ_r([u::UnitLike,] z, h, Tcmb0, Neff, m_nu, N_nu=Cosmology.n_nu(Neff))\n\nThe energy density of the universe in relativistic species at redshift z, in g / cm^3. Will convert to compatible unit u if provided.\n\nrho_r(z) = 1878 times 10^-29  h^2  Omega_r0  (1+z)^4  textgcm^3 \n\nExamples\n\njulia> ρ_r(Cosmology.Planck18, 0.0) ≈ 1.2844001178620257e-32 * Unitful.g / Unitful.cm^3\ntrue\n\njulia> ρ_r(UnitfulAstro.Msun / UnitfulAstro.kpc^3, Cosmology.Planck18, 0.0) ≈ 0.18977808590941606 * UnitfulAstro.Msun / UnitfulAstro.kpc^3\ntrue\n\njulia> ρ_r(Cosmology.Planck18, 0.0) ≈ ρ_γ(Cosmology.Planck18, 0.0) + ρ_ν(Cosmology.Planck18, 0.0)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.lagrangianR","page":"Public Methods","title":"Cosmology.lagrangianR","text":"lagrangianR([u::UnitLike,] M::Union{Real,u.Mass}, c::AbstractCosmology, z::Real=0.0)\n\nThe Lagrangian radius (in Mpc) of a sphere of mass M (in solar masses) at redshift z; i.e. the radius of a sphere that would enclose the mass M given the mean density of the universe at redshift z. \n\nR(z) = left( frac3 M4π  ρ_m(z) right)^13\n\nExamples\n\njulia> lagrangianR(10^12, Cosmology.Planck18, 0.0) == lagrangianR(10^12, Cosmology.Planck18) == lagrangianR(10^12 * UnitfulAstro.Msun, Cosmology.Planck18) ≈ 1.8239544820629736 * UnitfulAstro.Mpc\ntrue\n\njulia> lagrangianR(Unitful.m, 10^12, Cosmology.Planck18, 0.0) ≈ 5.628135454962416e22 * Unitful.m\ntrue\n\nNotes\n\nIf you want to provide M in units of Msun / h and get out R in units of Mpc / h, then you need to multiply the result by h^(2/3); i.e. R[Mpc/h] = lagrangianR(M[Msun/h], c, z) * h^(2/3).\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.lagrangianM","page":"Public Methods","title":"Cosmology.lagrangianM","text":"lagrangianM([u::UnitLike,] R::Union{Number,u.Length}, c::AbstractCosmology, z::Number=0.0)\n\nThe Lagrangian mass of a sphere of radius R in Mpc at redshift z; i.e. the mass enclosed by a sphere of radius R at redshift z given the mean density of the universe at redshift z.\n\nM(z) = frac4π3 R^3 ρ_m(z)\n\nExamples\n\njulia> lagrangianM(8.0, Cosmology.Planck18, 0.0) == lagrangianM(8.0, Cosmology.Planck18) == lagrangianM(8.0 * UnitfulAstro.Mpc, Cosmology.Planck18) ≈ 8.437775631070308e13 * UnitfulAstro.Msun\ntrue\n\njulia> lagrangianM(Unitful.kg, 8.0, Cosmology.Planck18, 0.0) ≈ 1.6777756351555676e44 * Unitful.kg\ntrue\n\nNotes\n\nIf you want to provide R in units of Mpc / h and get out M in units of Msun / h, then you need to divide the result by h^2; i.e. M[Msun/h] = lagrangianR(R[Mpc/h], c, z) / h^2.\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_m","page":"Public Methods","title":"Cosmology.Ω_m","text":"Ω_m(c::AbstractCosmology,z)\nΩ_m(c::AbstractCosmology)\nΩ_m(z,h,OmegaM,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nDensity of matter at redshift z in units of the critical density. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_m(Cosmology.Planck18)\n0.30966\n\njulia> Ω_m(Cosmology.Planck18, 1.0)\n0.7793349973337195\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_b","page":"Public Methods","title":"Cosmology.Ω_b","text":"Ω_b(c::AbstractCosmology,z)\nΩ_b(c::AbstractCosmology)\nΩ_b(z,h,OmegaM,OmegaB,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nDensity of baryons at redshift z in units of the critical density. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_b(Cosmology.Planck18)\n0.04897\n\njulia> Ω_b(Cosmology.Planck18, 1.0)\n0.1232449616335085\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_dm","page":"Public Methods","title":"Cosmology.Ω_dm","text":"Ω_dm(c::AbstractCosmology,z)\nΩ_dm(c::AbstractCosmology)\nΩ_dm(z,h,OmegaM,OmegaB,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nDensity of dark matter at redshift z in units of the critical density. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_dm(Cosmology.Planck18)\n0.26069\n\njulia> Ω_dm(Cosmology.Planck18, 1.0)\n0.6560900357002108\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_k","page":"Public Methods","title":"Cosmology.Ω_k","text":"Ω_k(c::AbstractCosmology,z)\nΩ_k(c::AbstractCosmology)\nΩ_k(z,h,OmegaM,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nEnergy density of curvature at redshift z in units of the critical density. When called without a redshift, returns the z=0 value.\n\nOmega_k = -frackH_0^2\n\nwhere k is the curvature parameter in the Friedmann equation. See Equations  1.5.19 and 1.5.40 on pages 56 and 60 in Weinberg's \"Cosmology\".\n\nExamples\n\njulia> Ω_k(Cosmology.Planck18) == Ω_k(Cosmology.Planck18, 1.0) == 0.0\ntrue\n\njulia> Ω_k( cosmology(OmegaK = 0.1 ), 1.0)\n0.11498515039500401\n\njulia> Ω_k( cosmology(OmegaK = -0.1 ), 1.0)\n-0.13895112427920248\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_γ","page":"Public Methods","title":"Cosmology.Ω_γ","text":"Ω_γ(c::AbstractCosmology,z)\nΩ_γ(c::AbstractCosmology)\nΩ_γ(z,h,OmegaM,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nEnergy density of photons at redshift z in units of the critical density. Calculated from T_cmb. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_γ(Cosmology.Planck18) ≈ 5.4020151371393475e-5\ntrue\n\njulia> Ω_γ(Cosmology.Planck18, 10000.0) ≈ 0.44150560915009124\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_ν","page":"Public Methods","title":"Cosmology.Ω_ν","text":"Ω_ν(c::AbstractCosmology,z)\nΩ_ν(z,h,OmegaM,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nEnergy density in neutrinos at redshift z in units of the critical density. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_ν(Cosmology.Planck18) ≈ 0.0014396743040860382\ntrue\n\njulia> Ω_ν(Cosmology.Planck18, 10000.0) ≈ 0.30543520244776484\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_r","page":"Public Methods","title":"Cosmology.Ω_r","text":"Ω_r(c::AbstractCosmology,z)\nΩ_r(c::AbstractCosmology)\nΩ_r(z,h,OmegaM,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nEnergy density in radiation at redshift z in units of the critical density. Evaluated as Ω_γ(c,z) + Ω_ν(c,z); sum of photons and neutrinos. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_r(Cosmology.Planck18) ≈ 0.0014936944554574316\ntrue\n\njulia> Ω_r(Cosmology.Planck18, 10000.0) ≈ 0.7469408115978561\ntrue\n\njulia> Ω_r(Cosmology.Planck18, 10000.0) == Ω_γ(Cosmology.Planck18, 10000.0) + Ω_ν(Cosmology.Planck18, 10000.0)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.Ω_Λ","page":"Public Methods","title":"Cosmology.Ω_Λ","text":"Ω_Λ(c::AbstractCosmology,z)\nΩ_Λ(c::AbstractCosmology)\nΩ_Λ(z,h,OmegaM,OmegaK,OmegaL,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nEnergy density in dark energy at redshift z in units of the critical density. When called without a redshift, returns the z=0 value.\n\nExamples\n\njulia> Ω_Λ(Cosmology.Planck18)\n0.6888463055445425\n\njulia> Ω_Λ(Cosmology.Planck18, 1.0)\n0.21670623978512665\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.δc","page":"Public Methods","title":"Cosmology.δc","text":"δc(c::AbstractCosmology, z::Real)\nδc(z::Real, h, OmegaM, OmegaK, OmegaL, Tcmb0, m_nu, Neff, w0=-1, wa=0)\n\nThe linear overdensity threshold for halo collapse as calculated from the spherical top-hat collapse model. The canonical value for an Einstein-de-Sitter (EdS) cosmology is 35(3π2)^23  1686 but there is a redshift dependence for non-EdS cosmologies. We adopt the fitting function from Nakamura & Suto 1997 (Equation C-28 in the ArXiv version), also given by Equation 56 in Chisari et al. 2019.\n\nExamples\n\njulia> δc(Cosmology.Planck18, 0.0) ≈ 1.675910191226453\ntrue\n\njulia> δc(Cosmology.Planck18, 10.0) ≈ 1.686388790734125\ntrue\n\njulia> δc(Cosmology.Planck18,10^10,0.0,1.0,1.5) ≈ 1.712312778883257\ntrue\n\n\n\n\n\nδc(c::AbstractCosmology, M::Union{Real,AbstractArray}, z::Real, mx::Real, gx::Real=1.5)\n\nReturn the linear overdensity threshold for collapse in warm dark matter cosmologies as formulated by Equations 7–10 in Benson 2013. M is the halo mass, z is the redshift of evaluation, mx is the mass of the WDM particle in keV, and gx is the effective degrees of freedom with 1.5 being the expected value for a fermionic spin-1/2 particle.\n\nExamples\n\njulia> δc(Cosmology.Planck18, 10^10, 0.0, 1.0, 1.5) ≈ 1.712312778883257\ntrue\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Equation-Solving","page":"Public Methods","title":"Equation Solving","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"z_at_value","category":"page"},{"location":"public_methods/#Cosmology.z_at_value","page":"Public Methods","title":"Cosmology.z_at_value","text":"z_at_value(c::AbstractCosmology, func::Function, fval; zmin=1e-8, zmax=1000.0, kws...)\n\nFind the redshift z at which func(c,z) == fval for cosmology instance c. This uses a numerical root finder and searches between zmin and zmax. Additional kws... are passed through to Roots.find_zero.\n\nExamples\n\njulia> z_at_value(Cosmology.Planck18, scale_factor, 0.8) ≈ 0.25\ntrue\n\njulia> z_at_value(Cosmology.Planck18, distmod, 50.0) ≈ 9.5f0\ntrue\n\nwarning: Warning\nNot all cosmological methods defined in this module are monotonic with redshift, such that there may not be a unique solution over the default zmin->zmax (e.g., angular_diameter_dist). In this case, you need to make sure that zmin and zmax properly bracket the solution you are looking for.\n\njulia> z_at_value(Cosmology.Planck18, angular_diameter_dist, 1250.0; zmin=1e-5, zmax=2.5)\n0.46668775101654764\n\njulia> z_at_value(Cosmology.Planck18, angular_diameter_dist, 1250.0; zmin=2.5, zmax=10.0)\n5.595635655898187\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Miscellaneous","page":"Public Methods","title":"Miscellaneous","text":"","category":"section"},{"location":"public_methods/","page":"Public Methods","title":"Public Methods","text":"scale_factor\n∇scale_factor","category":"page"},{"location":"public_methods/#Cosmology.scale_factor","page":"Public Methods","title":"Cosmology.scale_factor","text":"scale_factor(z::Real)\nscale_factor(c::AbstractCosmology, z::Real)\n\nCalculate the scale factor at redshift z. The scale factor is defined as a=frac11+z. The method that takes a cosmology is for compatibility with z_at_value. The derivative with respect to z is available as ∇scale_factor.\n\nExamples\n\njulia> scale_factor(1.0)\n0.5\n\njulia> scale_factor(Cosmology.Planck18, 1.0)\n0.5\n\n\n\n\n\n","category":"function"},{"location":"public_methods/#Cosmology.∇scale_factor","page":"Public Methods","title":"Cosmology.∇scale_factor","text":"∇scale_factor(z::Real) or ∇scale_factor(c::AbstractCosmology, z::Real)\n\nCalculate the derivative of the scale factor at redshift z with respect to z; fracdadz = -frac1left(1+zright)^2.\n\nExamples\n\njulia> ∇scale_factor(1.0)\n-0.25\n\njulia> ∇scale_factor(Cosmology.Planck18, 1.0)\n-0.25\n\n\n\n\n\n","category":"function"},{"location":"constants/#constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"constants/","page":"Constants","title":"Constants","text":"Cosmology.constants.G\nCosmology.constants.G_CGS\nCosmology.constants.KPC_CM\nCosmology.constants.KPC_KM\nCosmology.constants.DELTA_COLLAPSE\nCosmology.constants.RHO_C_Z0_CGS\nCosmology.constants.RHO_C_Z0_KPC\nCosmology.constants.RHO_C_Z0_MPC\nCosmology.constants.TNU_PREFAC","category":"page"},{"location":"constants/#Cosmology.constants.G","page":"Constants","title":"Cosmology.constants.G","text":"Newton's gravitational constant in units of kpc km^2 / Msun / s^2. \n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.G_CGS","page":"Constants","title":"Cosmology.constants.G_CGS","text":"Newton's gravitational constant in units of cm^3 / g / s^2. \n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.KPC_CM","page":"Constants","title":"Cosmology.constants.KPC_CM","text":"Number of centimeters in a kiloparsec. \n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.KPC_KM","page":"Constants","title":"Cosmology.constants.KPC_KM","text":"Number of kilometers in a kiloparsec. \n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.DELTA_COLLAPSE","page":"Constants","title":"Cosmology.constants.DELTA_COLLAPSE","text":"Linear overdensity threshold for halo collapse for the spherical top-hat collapse model, 35 times (3π2)^23. \n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.RHO_C_Z0_CGS","page":"Constants","title":"Cosmology.constants.RHO_C_Z0_CGS","text":"Prefactor for the critical density of the Universe, in units of g / cm^3,\n\nfrac38πG  left(100  textkm  texts^-1  textMpc^-1 right)^2\n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.RHO_C_Z0_KPC","page":"Constants","title":"Cosmology.constants.RHO_C_Z0_KPC","text":"Prefactor for the critical density of the Universe, in units of Msun / kpc^3,\n\nfrac38πG  left(100  textkm  texts^-1  textMpc^-1 right)^2\n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.RHO_C_Z0_MPC","page":"Constants","title":"Cosmology.constants.RHO_C_Z0_MPC","text":"Prefactor for the critical density of the Universe, in units of Msun / Mpc^3,\n\nfrac38πG  left(100  textkm  texts^-1  textMpc^-1 right)^2\n\n\n\n\n\n","category":"constant"},{"location":"constants/#Cosmology.constants.TNU_PREFAC","page":"Constants","title":"Cosmology.constants.TNU_PREFAC","text":"Conversion factor between CMB temperature and neutrino temperature, frac411^13. \n\n\n\n\n\n","category":"constant"},{"location":"integrated_packages/#integrated_packages","page":"Integrated Packages","title":"Integrated Packages","text":"","category":"section"},{"location":"#index","page":"Index","title":"Index","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"Modules = [Cosmology]\nPages = [\"types.md\",\"public_methods.md\",\"private_methods.md\"]","category":"page"},{"location":"private_methods/#private_methods","page":"Private Methods","title":"Private Methods","text":"","category":"section"},{"location":"private_methods/","page":"Private Methods","title":"Private Methods","text":"The following methods are used internally but not exported. They are not guaranteed to have stable APIs or be properly documented.","category":"page"},{"location":"private_methods/","page":"Private Methods","title":"Private Methods","text":"Cosmology.nu_relative_density\nCosmology.a2E\nCosmology.hubble_dist0\nCosmology.hubble_time0\nCosmology.w\nCosmology.de_density_scale","category":"page"},{"location":"private_methods/#Cosmology.nu_relative_density","page":"Private Methods","title":"Cosmology.nu_relative_density","text":"nu_relative_density(m_nu::Number, Neff::Number, nu_temp::Number N_nu::Number=n_nu(Neff))\nnu_relative_density(m_nu, Neff::Number, nu_temp::Number, N_nu::Union{Nothing,Number}=nothing)\nnu_relative_density(c::AbstractCosmology, z)\nnu_relative_density(c::AbstractCosmology)\n\nReturn the neutrino density function relative to the energy density in photons. If !(m_nu isa Number), then m_nu should be iterable and indexable. When called with an AbstractCosmology but without a redshift, returns the z=0 value. \n\nArguments\n\nm_nu::Any; either a Number or an iterable (like an Array or Tuple) that contains the neutrino masses in eV.\nNeff; effective number of neutrino species; see Cosmology.Neff.\nN_nu; number of neutrino species; see Cosmology.n_nu.\nnu_temp; temperature of neutrino background in Kelvin; see T_nu. This is the argument that carries the redshift dependence.\n\nnote: Note\nIt is recommended that length(m_nu) == N_nu, unless N_nu==0 in which case it doesn't matter. For example, if N_nu==3 and you want one massive neutrino species with mass 0.06 eV, you should write m_nu=(0.0,0.0,0.06). The current implementation is kind of stupid and can miscount the number of massless neutrinos if length(m_nu) != N_nu. \n\n\n\n\n\n","category":"function"},{"location":"private_methods/#Cosmology.a2E","page":"Private Methods","title":"Cosmology.a2E","text":"a2E(c::AbstractCosmology,a)\na2E(a,OmegaM,OmegaK,OmegaL,OmegaG,Tcmb0,m_nu,Neff,w0=-1,wa=0)\n\nReturn the cosmological E factor times the square of the scale factor a.\n\nExamples\n\njulia> Cosmology.a2E(Cosmology.Planck18,0.8)\n0.7287593862161843\n\n\n\n\n\n","category":"function"},{"location":"private_methods/#Cosmology.hubble_dist0","page":"Private Methods","title":"Cosmology.hubble_dist0","text":"hubble_dist0(c::AbstractCosmology)\n\nReturn the Hubble distance at present-day in Mpc, defined as the speed of light times the Hubble time at present-day.\n\n    D_0 = fraccH_0\n\nExamples\n\njulia> Cosmology.hubble_dist0(Cosmology.Planck18)\n4430.866952409105 Mpc\n\n\n\n\n\n","category":"function"},{"location":"private_methods/#Cosmology.hubble_time0","page":"Private Methods","title":"Cosmology.hubble_time0","text":"hubble_time0(c::AbstractCosmology)\n\nReturn frac1textH_0 in Gyr.\n\nExamples\n\njulia> Cosmology.hubble_time0(Cosmology.Planck18)\n14.451555153425796 Gyr\n\n\n\n\n\n","category":"function"},{"location":"private_methods/#Cosmology.w","page":"Private Methods","title":"Cosmology.w","text":"w(c::Union{FlatWCDM,OpenWCDM,ClosedWCDM,FlatLCDM,OpenLCDM,ClosedLCDM},z)\nw(z::Real,w0::Real,wa::Real)\n\nEvaluates the redshift dependence of the dark energy equation of state,\n\nw equiv fracp_Lambdarho_Lambda\n\nthe ratio of the pressure to the energy density. The scaling factor, I(z), is defined by ρ_Λ(z) = I(z)  ρ_Λ0.\n\n\n\n\n\n","category":"function"},{"location":"private_methods/#Cosmology.de_density_scale","page":"Private Methods","title":"Cosmology.de_density_scale","text":"de_density_scale(c::Union{FlatWCDM,OpenWCDM,ClosedWCDM},z)\nde_density_scale(z::Real,w0::Real,wa::Real)\n\nReturns the redshift scaling of the dark energy density. See ρ_Λ. \n\n\n\n\n\n","category":"function"},{"location":"types/#types","page":"Defined Types","title":"Defined Types","text":"","category":"section"},{"location":"types/#Abstract-Types","page":"Defined Types","title":"Abstract Types","text":"","category":"section"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"The highest level type defined in this package is the abstract type Cosmology.AbstractCosmology, which all other cosmology objects are subtyped from. Below these are Cosmology.AbstractFlatCosmology, Cosmology.AbstractOpenCosmology, and Cosmology.AbstractClosedCosmology.","category":"page"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"Cosmology.AbstractCosmology\nCosmology.AbstractFlatCosmology\nCosmology.AbstractOpenCosmology\nCosmology.AbstractClosedCosmology","category":"page"},{"location":"types/#Cosmology.AbstractCosmology","page":"Defined Types","title":"Cosmology.AbstractCosmology","text":"AbstractCosmology is the base type for all cosmologies. \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.AbstractFlatCosmology","page":"Defined Types","title":"Cosmology.AbstractFlatCosmology","text":"AbstractFlatCosmology is the base type for all flat cosmologies (Ω_k=0). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.AbstractOpenCosmology","page":"Defined Types","title":"Cosmology.AbstractOpenCosmology","text":"AbstractOpenCosmology is the base type for all open cosmologies (Ω_k<0). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.AbstractClosedCosmology","page":"Defined Types","title":"Cosmology.AbstractClosedCosmology","text":"AbstractClosedCosmology is the base type for all closed cosmologies (Ω_k<0). \n\n\n\n\n\n","category":"type"},{"location":"types/#concrete_types","page":"Defined Types","title":"Concrete Types","text":"","category":"section"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"The following concrete types, representing specific types of cosmologies, are currently implemented:","category":"page"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"Cosmology.FlatLCDM\nCosmology.OpenLCDM\nCosmology.ClosedLCDM\nCosmology.FlatWCDM\nCosmology.OpenWCDM\nCosmology.ClosedWCDM","category":"page"},{"location":"types/#Cosmology.FlatLCDM","page":"Defined Types","title":"Cosmology.FlatLCDM","text":"FlatLCDM(h::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν)\n\nType for flat (Ω_k=0) ΛCDM cosmologies (w0=-1, wa=0). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.OpenLCDM","page":"Defined Types","title":"Cosmology.OpenLCDM","text":"OpenLCDM(h::Real, Ω_k::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν)\n\nType for open (Ω_k>0) ΛCDM cosmologies (w0=-1, wa=0). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.ClosedLCDM","page":"Defined Types","title":"Cosmology.ClosedLCDM","text":"ClosedLCDM(h::Real, Ω_k::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν)\n\nType for closed (Ω_k<0) ΛCDM cosmologies (w0=-1, wa=0). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.FlatWCDM","page":"Defined Types","title":"Cosmology.FlatWCDM","text":"FlatWCDM(h::Real, Ω_k::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν, w0::Real, wa::Real)\n\nFlat cosmology with the w0wa dark energy equation of state,\n\nw(z) = w_0 + w_a  fracz1+z = w_0 + w_a  (1-a)\n\n(Equations 6 and 7 in Linder 2003). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.OpenWCDM","page":"Defined Types","title":"Cosmology.OpenWCDM","text":"FlatWCDM(h::Real, Ω_k::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν, w0::Real, wa::Real)\n\nOpen cosmology with the w0wa dark energy equation of state,\n\nw(z) = w_0 + w_a  fracz1+z = w_0 + w_a  (1-a)\n\n(Equations 6 and 7 in Linder 2003). \n\n\n\n\n\n","category":"type"},{"location":"types/#Cosmology.ClosedWCDM","page":"Defined Types","title":"Cosmology.ClosedWCDM","text":"FlatWCDM(h::Real, Ω_k::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν, w0::Real, wa::Real)\n\nClosed cosmology with the w0wa dark energy equation of state,\n\nw(z) = w_0 + w_a  fracz1+z = w_0 + w_a  (1-a)\n\n(Equations 6 and 7 in Linder 2003). \n\n\n\n\n\n","category":"type"},{"location":"types/#Convenience-Constructors","page":"Defined Types","title":"Convenience Constructors","text":"","category":"section"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"Cosmology.cosmology\nCosmology.WCDM","category":"page"},{"location":"types/#Cosmology.cosmology","page":"Defined Types","title":"Cosmology.cosmology","text":"cosmology(;h = 0.6766, OmegaK = 0, OmegaM = 0.30966, OmegaB = 0.04897, OmegaG = nothing, Tcmb0 = 2.7255, w0 = -1, wa = 0, N_eff = 3.046, m_ν=(0.0,0.0,0.06))\n\nConstructs the proper AbstractCosmology type depending on the passed parameters. To specify the photon density of the cosmology, either OmegaG or Tcmb0 can be provided; if OmegaG is provided, it takes precedence over Tcmb0. To turn neutrinos off, you can set N_eff=nothing, m_ν=nothing; then OmegaG==OmegaR, all radiation is in the form of photons.  \n\nParameters\n\nh - Dimensionless Hubble constant\nOmegaK - Curvature density (Ω_k)\nOmegaM - Matter density (Ω_m)\nOmegaB - Baryon density (Ω_b)\nOmegaG - Photon density (Ω_γ)  \nTcmb0 - CMB temperature in Kelvin; used to compute Ω_γ if not provided\nw0 - CPL dark energy equation of state; w = w0 + wa(1-a)\nwa - CPL dark energy equation of state; w = w0 + wa(1-a)\nN_eff - Effective number of massless neutrino species; used to compute Ω_ν\nm_ν - Neutrino masses; should have length equal to Int(floor(N_eff)) but this is not explicitly checked. If N_eff==0 then m_ν isn't used for anything.\n\nExamples\n\ninfo: Info\nThis function is not type-stable; it will return different concrete subtypes of AbstractCosmology depending on the parameters you pass. This incurs a performance penalty. If you want to, you can access constructors of the concrete types directly; this can make creation of new instances much faster. For example, c=cosmology() takes ~300 ns, while FlatLCDM(c.h,c.Ω_Λ,c.Ω_m,c.Ω_b,c.Tcmb0,c.Neff,c.m_nu) takes ~1 ns. If you REALLY need this speed, you should use the basic constructors.\n\nnote: Note\nInclusion of massive neutrinos is expensive. For example, for the default massive neutrino parameters c=cosmology(), the evaluation of E(c, 0.8) takes 114.613 ns, while E( cosmology(m_ν=(0.0,),N_eff=3.046), 0.8) takes 6.986 ns and E( cosmology(m_ν=(0.0,),N_eff=0), 0.8) takes 6.095 ns. This makes a significant difference in methods that involve integrations (e.g., comoving_radial_dist). If speed is a concern, consider if you can neglect neutrinos for your calculation. \n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.WCDM","page":"Defined Types","title":"Cosmology.WCDM","text":"WCDM(h::Real, Ω_k::Real, Ω_Λ::Real, Ω_m::Real, Ω_b::Real, Tcmb0::Real, Neff::Real, m_ν, w0::Real, wa::Real)\n\nConstructs a cosmology with the w0wa dark energy equation of state,\n\nw(z) = w_0 + w_a  fracz1+z = w_0 + w_a  (1-a)\n\nand returns one of FlatWCDM, OpenWCDM, ClosedWCDM depending the value of Ω_k. This function is type-unstable by design. \n\n\n\n\n\n","category":"function"},{"location":"types/#default_cosmologies","page":"Defined Types","title":"Pre-Constructed Instances","text":"","category":"section"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"These are constant instances that implement published cosmological results.","category":"page"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"note: Note\nThese instances are not exported, so you must import them explicitly; e.g,","category":"page"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"import Cosmology: Planck18\nPlanck18","category":"page"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"Cosmology.Planck18\nCosmology.Planck15\nCosmology.Planck15_only\nCosmology.Planck13\nCosmology.WMAP9\nCosmology.WMAP7\nCosmology.WMAP5","category":"page"},{"location":"types/#Cosmology.Planck18","page":"Defined Types","title":"Cosmology.Planck18","text":"The full Planck 18 cosmology (best fit with BAO; column 6). \n\n\n\n\n\n","category":"constant"},{"location":"types/#Cosmology.Planck15","page":"Defined Types","title":"Cosmology.Planck15","text":"The full Planck 15 cosmology (TT,TE,EE+lowP+lensing+ext; column 6 in Table 4 of Planck 2015 paper). \n\n\n\n\n\n","category":"constant"},{"location":"types/#Cosmology.Planck15_only","page":"Defined Types","title":"Cosmology.Planck15_only","text":"The conservative Planck 15 cosmology (TT+lowP+lensing; column 2 in Table 4 of Planck 2015 paper). \n\n\n\n\n\n","category":"constant"},{"location":"types/#Cosmology.Planck13","page":"Defined Types","title":"Cosmology.Planck13","text":"The full Planck 13 cosmology. \n\n\n\n\n\n","category":"constant"},{"location":"types/#Cosmology.WMAP9","page":"Defined Types","title":"Cosmology.WMAP9","text":"The full WMAP 9 cosmology. \n\n\n\n\n\n","category":"constant"},{"location":"types/#Cosmology.WMAP7","page":"Defined Types","title":"Cosmology.WMAP7","text":"The full WMAP 7 cosmology. \n\n\n\n\n\n","category":"constant"},{"location":"types/#Cosmology.WMAP5","page":"Defined Types","title":"Cosmology.WMAP5","text":"The full WMAP 5 cosmology. \n\n\n\n\n\n","category":"constant"},{"location":"types/#Retrieving-Parameters","page":"Defined Types","title":"Retrieving Parameters","text":"","category":"section"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"The parameters that define these types are accessed via the following unexported, internal methods.","category":"page"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"Cosmology.h\nCosmology.partype\nCosmology.m_nu\nCosmology.Neff\nCosmology.n_nu\nCosmology.w0\nCosmology.wa","category":"page"},{"location":"types/#Cosmology.h","page":"Defined Types","title":"Cosmology.h","text":"h(c::T) where T<:AbstractCosmology\n\nReturn \"little h\" for the cosmology, defined as the Hubble constant at present day (H0) divided by 100 km / s / Mpc.\n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.partype","page":"Defined Types","title":"Cosmology.partype","text":"partype(c::T) where T<:AbstractCosmology\n\nReturn the type of the scalar fields in the AbstractCosmology object c. \n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.m_nu","page":"Defined Types","title":"Cosmology.m_nu","text":"m_nu(c::T) where T<:AbstractCosmology\n\nReturn the masses of the neutrino species in the cosmology c in eV.\n\n\n\n\n\nm_nu(x::AbstractArray)\nm_nu(x::AbstractArray{<:Unitful.Energy})\nm_nu(x::AbstractArray{<:Unitful.Mass})\nm_nu(x::Tuple)\nm_nu(x::NTuple)\nm_nu(x::NTuple{N,T}) where {N,T<:u.Energy}\nm_nu(x::NTuple{N,T}) where {N,T<:u.Mass}\nm_nu(x::Number)\nm_nu(x::Nothing)\n\nConverts various forms of m_nu to NTuples so they can be stored in the cosmology structs. Currently mixed units in a Tuple is not supported. If providing units in the argument, they should all be the same. \n\nExamples\n\njulia> x=[0.0,0.0,0.06];\n\njulia> m_nu(x)\n(0.0, 0.0, 0.06)\n\njulia> x=[0.0,0.0,0.06]*Unitful.eV;\n\njulia> m_nu(x)\n(0.0, 0.0, 0.06)\n\njulia> x=(0.0,0.0,0.06);\n\njulia> m_nu(x) === x\ntrue\n\njulia> x=(0.0,0.0,0.06) .* Unitful.eV;\n\njulia> m_nu(x)\n(0.0, 0.0, 0.06)\n\njulia> m_nu(0.06)\n(0.06,)\n\njulia> m_nu(nothing)\n(0,)\n\n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.Neff","page":"Defined Types","title":"Cosmology.Neff","text":"Neff(c::T) where T<:AbstractCosmology\n\nReturn the effective number of neutrino species in the cosmology c.\n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.n_nu","page":"Defined Types","title":"Cosmology.n_nu","text":"n_nu(c::AbstractCosmology)\nn_nu(Neff::Real)\n\nReturn the number of discrete neutrinos in the cosmology, defined as Int(floor(Neff(c))); see Neff.\n\nExamples\n\njulia> Cosmology.n_nu(Cosmology.Planck18)\n3\n\njulia> Cosmology.n_nu(3.046)\n3\n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.w0","page":"Defined Types","title":"Cosmology.w0","text":"w0(c::Union{FlatWCDM,OpenWCDM,ClosedWCDM})\n\nReturn the present-day value of w for the CDL dark energy equation of state.\n\n\n\n\n\n","category":"function"},{"location":"types/#Cosmology.wa","page":"Defined Types","title":"Cosmology.wa","text":"wa(c::Union{FlatWCDM,OpenWCDM,ClosedWCDM})\n\nReturn the evolution parameter for the CDL dark energy equation of state.\n\n\n\n\n\n","category":"function"},{"location":"types/","page":"Defined Types","title":"Defined Types","text":"Other parameters that have more complicated associated methods (e.g., parameters with redshift evolution like T_cmb) are given in the Methods section.","category":"page"}]
}
